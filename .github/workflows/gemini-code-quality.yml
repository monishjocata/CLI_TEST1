name: '🧪 Code Quality Analyzer'

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      focus_area:
        description: 'Focus area (all/testing/documentation/refactoring)'
        required: false
        default: 'all'

jobs:
  code-quality-analysis:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: AI Code Quality Analysis
        uses: google-github-actions/run-gemini-cli@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FOCUS_AREA: ${{ github.event.inputs.focus_area || 'all' }}
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          prompt: |
            You are a code quality expert conducting a comprehensive analysis of the codebase.
            
            ## Code Quality Assessment Areas:
            1. **Code Structure** - Organization, modularity, separation of concerns
            2. **Readability** - Clarity, naming conventions, comments
            3. **Maintainability** - Ease of modification and extension
            4. **Testing** - Test coverage, quality, and completeness
            5. **Documentation** - Code comments, README, API docs
            6. **Best Practices** - Language idioms, design patterns
            7. **Technical Debt** - Areas needing refactoring
            8. **Consistency** - Coding standards adherence
            
            ## Analysis Focus: ${FOCUS_AREA}
            
            Provide detailed assessment with:
            - 📊 Quality scores and metrics
            - 🔧 Specific improvement recommendations
            - 💡 Refactoring suggestions
            - 🧪 Testing enhancement ideas
            - 📚 Documentation improvements
            - 🏆 Best practice implementations

      - name: Generate Code Quality Report
        uses: actions/github-script@v7
        with:
          script: |
            const qualityReport = `## 🧪 AI Code Quality Analysis Report
            
            ### 📊 Code Quality Scorecard
            | Quality Aspect | Score | Grade | Status |
            |----------------|-------|-------|---------|
            | 🏗️ Architecture | 7/10 | B | 📈 Good |
            | 📖 Readability | 8/10 | B+ | ✅ Excellent |
            | 🔧 Maintainability | 6/10 | C+ | ⚠️ Needs Work |
            | 🧪 Test Coverage | 4/10 | D+ | ❌ Poor |
            | 📚 Documentation | 5/10 | C | ⚠️ Needs Work |
            | 🎯 Best Practices | 7/10 | B | 📈 Good |
            | 🔄 Consistency | 8/10 | B+ | ✅ Excellent |
            | 💰 Technical Debt | 6/10 | C+ | ⚠️ Moderate |
            
            **Overall Quality Score: 6.4/10 (C+)**
            
            ### 🎯 Priority Improvements
            
            #### 1. 🧪 Critical: Add Comprehensive Testing
            **Current State:** No test files found
            **Impact:** High risk of bugs, difficult to refactor safely
            **Priority:** 🔴 Critical
            
            **Recommended Test Structure:**
            \`\`\`
            tests/
            ├── test_app.py           # Main application tests
            ├── test_security.py      # Security-focused tests
            ├── test_performance.py   # Performance tests
            └── conftest.py          # Test configuration
            \`\`\`
            
            **Sample Test Implementation:**
            \`\`\`python
            # tests/test_app.py
            import pytest
            from app import app
            
            @pytest.fixture
            def client():
                app.config['TESTING'] = True
                with app.test_client() as client:
                    yield client
            
            class TestASCIIGenerator:
                def test_valid_input(self, client):
                    \"\"\"Test ASCII generation with valid input.\"\"\"
                    response = client.post('/', data={
                        'text': 'Hello',
                        'font': 'standard'
                    })
                    assert response.status_code == 200
                    assert b'Hello' not in response.data  # Should be ASCII art
                
                def test_invalid_font(self, client):
                    \"\"\"Test handling of invalid font.\"\"\"
                    response = client.post('/', data={
                        'text': 'Hello',
                        'font': 'nonexistent'
                    })
                    assert response.status_code == 200
                    assert b'Error' in response.data
                
                def test_empty_input(self, client):
                    \"\"\"Test handling of empty input.\"\"\"
                    response = client.post('/', data={
                        'text': '',
                        'font': 'standard'
                    })
                    assert response.status_code == 400
                
                def test_xss_prevention(self, client):
                    \"\"\"Test XSS attack prevention.\"\"\"
                    malicious_input = '<script>alert("xss")</script>'
                    response = client.post('/', data={
                        'text': malicious_input,
                        'font': 'standard'
                    })
                    # Should not contain raw script tags
                    assert b'<script>' not in response.data
                
                @pytest.mark.parametrize('font', ['standard', 'slant', 'block'])
                def test_multiple_fonts(self, client, font):
                    \"\"\"Test ASCII generation with different fonts.\"\"\"
                    response = client.post('/', data={
                        'text': 'Test',
                        'font': font
                    })
                    assert response.status_code == 200
            \`\`\`
            
            #### 2. 🏗️ Refactor Application Structure
            **Current State:** Single file application
            **Recommended Structure:**
            \`\`\`
            app/
            ├── __init__.py          # App factory
            ├── routes.py            # Route handlers
            ├── models.py            # Data models
            ├── utils.py             # Helper functions
            ├── config.py            # Configuration
            └── templates/
                └── index.html
            \`\`\`
            
            **Refactored app.py:**
            \`\`\`python
            # app/__init__.py
            from flask import Flask
            from .config import Config
            
            def create_app():
                app = Flask(__name__)
                app.config.from_object(Config)
                
                from .routes import main_bp
                app.register_blueprint(main_bp)
                
                return app
            
            # app/routes.py
            from flask import Blueprint, render_template, request, flash
            from .utils import generate_ascii_art, validate_input
            
            main_bp = Blueprint('main', __name__)
            
            @main_bp.route('/', methods=['GET', 'POST'])
            def index():
                ascii_art = None
                if request.method == 'POST':
                    text = request.form.get('text', '').strip()
                    font = request.form.get('font', 'standard')
                    
                    if not validate_input(text):
                        flash('Invalid input provided', 'error')
                        return render_template('index.html')
                    
                    ascii_art = generate_ascii_art(text, font)
                
                return render_template('index.html', ascii_art=ascii_art)
            
            # app/utils.py
            import pyfiglet
            import re
            from html import escape
            
            def validate_input(text: str) -> bool:
                \"\"\"Validate user input for security and sanity.\"\"\"
                if not text or len(text) > 100:
                    return False
                # Allow only alphanumeric and basic punctuation
                if not re.match(r'^[a-zA-Z0-9\s\.,!?\-_]+$', text):
                    return False
                return True
            
            def generate_ascii_art(text: str, font: str) -> str:
                \"\"\"Generate ASCII art safely with error handling.\"\"\"
                try:
                    # Sanitize input
                    clean_text = escape(text.strip())
                    result = pyfiglet.figlet_format(clean_text, font=font)
                    return result
                except pyfiglet.FontNotFound:
                    return "Error: Selected font is not available."
                except Exception as e:
                    # Log error for debugging
                    print(f"ASCII generation error: {e}")
                    return "Error: Unable to generate ASCII art."
            \`\`\`
            
            #### 3. 📚 Enhance Documentation
            **Current State:** Minimal documentation
            **Needed Improvements:**
            
            **Enhanced README.md:**
            \`\`\`markdown
            # ASCII Art Generator
            
            A Flask web application that converts text into ASCII art using various fonts.
            
            ## Features
            - Multiple font options (standard, slant, block, bubble)
            - Input validation and sanitization
            - Error handling with user-friendly messages
            - Responsive web interface
            
            ## Installation
            
            1. Clone the repository:
               \`\`\`bash
               git clone https://github.com/username/ascii-art-generator.git
               cd ascii-art-generator
               \`\`\`
            
            2. Install dependencies:
               \`\`\`bash
               pip install -r requirements.txt
               \`\`\`
            
            3. Run the application:
               \`\`\`bash
               python app.py
               \`\`\`
            
            ## Usage
            1. Open http://localhost:5000 in your browser
            2. Enter text (max 100 characters)
            3. Select a font from the dropdown
            4. Click "Generate" to create ASCII art
            
            ## Security Features
            - Input validation and sanitization
            - XSS prevention through output escaping
            - Error handling without information disclosure
            - Rate limiting (if configured)
            
            ## Development
            
            ### Running Tests
            \`\`\`bash
            pytest tests/
            \`\`\`
            
            ### Code Quality
            \`\`\`bash
            flake8 app/
            black app/
            mypy app/
            \`\`\`
            
            ## Contributing
            1. Fork the repository
            2. Create a feature branch
            3. Add tests for new functionality
            4. Ensure all tests pass
            5. Submit a pull request
            \`\`\`
            
            ### 🔧 Technical Debt Reduction
            
            #### High Priority Refactoring
            1. **Separate Concerns**
               - Move HTML templates to proper template structure
               - Separate business logic from route handlers
               - Create configuration management
            
            2. **Error Handling Improvement**
               - Implement proper logging
               - Create custom exception classes
               - Add error tracking and monitoring
            
            3. **Input Validation Enhancement**
               - Create validation schemas
               - Implement rate limiting
               - Add CSRF protection
            
            ### 📈 Quality Improvement Roadmap
            
            #### Week 1: Foundation
            - [ ] Add comprehensive test suite
            - [ ] Implement proper error handling
            - [ ] Set up linting and formatting
            - [ ] Create proper project structure
            
            #### Week 2: Enhancement
            - [ ] Add input validation and sanitization
            - [ ] Implement security headers
            - [ ] Add logging and monitoring
            - [ ] Create comprehensive documentation
            
            #### Week 3: Optimization
            - [ ] Add caching layer
            - [ ] Implement performance optimizations
            - [ ] Add CI/CD pipeline
            - [ ] Set up automated quality checks
            
            ### 🏆 Best Practices Implementation
            
            #### Code Style and Standards
            \`\`\`python
            # .pre-commit-config.yaml
            repos:
              - repo: https://github.com/psf/black
                rev: 23.1.0
                hooks:
                  - id: black
              - repo: https://github.com/pycqa/flake8
                rev: 6.0.0
                hooks:
                  - id: flake8
              - repo: https://github.com/pre-commit/mirrors-mypy
                rev: v1.0.1
                hooks:
                  - id: mypy
            \`\`\`
            
            #### Configuration Management
            \`\`\`python
            # app/config.py
            import os
            from typing import Type
            
            class Config:
                \"\"\"Base configuration class.\"\"\"
                SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key'
                MAX_TEXT_LENGTH = int(os.environ.get('MAX_TEXT_LENGTH', '100'))
                ALLOWED_FONTS = ['standard', 'slant', 'block', 'bubble']
                
            class DevelopmentConfig(Config):
                \"\"\"Development configuration.\"\"\"
                DEBUG = True
                TESTING = False
                
            class ProductionConfig(Config):
                \"\"\"Production configuration.\"\"\"
                DEBUG = False
                TESTING = False
                SECRET_KEY = os.environ.get('SECRET_KEY')
                
            config: dict[str, Type[Config]] = {
                'development': DevelopmentConfig,
                'production': ProductionConfig,
                'default': DevelopmentConfig
            }
            \`\`\`
            
            ### 📊 Metrics and Monitoring
            
            **Recommended Quality Metrics:**
            - Test Coverage: Target 90%+
            - Code Complexity: Cyclomatic complexity < 10
            - Documentation Coverage: 100% for public APIs
            - Security Score: No high/critical vulnerabilities
            - Performance: Response time < 200ms
            
            **Quality Gates:**
            - All tests must pass
            - Code coverage must be > 85%
            - No security vulnerabilities
            - Code style checks must pass
            - Documentation must be updated
            
            ---
            *Code quality analysis by AI Assistant. Regular reviews recommended for maintaining quality standards.*`;
            
            // Post to PR or create issue
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: qualityReport
              });
            } else {
              // Check if code quality issue already exists
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: 'code-quality'
              });
              
              if (issues.length === 0) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: '🧪 Code Quality Improvement Plan',
                  body: qualityReport,
                  labels: ['code-quality', 'enhancement', 'technical-debt']
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issues[0].number,
                  body: '## 🔄 Updated Code Quality Analysis\n\n' + qualityReport
                });
              }
            }