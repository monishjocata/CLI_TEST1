name: 'Gemini AI Assistant'

on:
  issues:
    types: [opened, reopened]
  pull_request:
    types: [opened, synchronize]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  ai-assistant:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Issue Analysis and Labeling
        if: github.event_name == 'issues'
        uses: google-github-actions/run-gemini-cli@v0
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        with:
          prompt: |
            Analyze this GitHub issue and provide:
            1. Issue categorization (bug, feature request, documentation, etc.)
            2. Severity assessment (critical, high, medium, low)
            3. Recommended labels
            4. Suggestions for resolution
            5. Technical recommendations
            6. Estimated effort
            
            Issue Title: ${{ github.event.issue.title }}
            Issue Body: ${{ github.event.issue.body }}

      - name: Pull Request Review
        if: github.event_name == 'pull_request'
        uses: google-github-actions/run-gemini-cli@v0
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        with:
          prompt: |
            Review this pull request focusing on:
            1. Code quality assessment
            2. Security review
            3. Performance analysis
            4. Best practices check
            5. Testing evaluation
            6. Documentation review
            
            PR Title: ${{ github.event.pull_request.title }}
            PR Body: ${{ github.event.pull_request.body }}

      - name: Respond to Mentions
        if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@gemini-cli')
        uses: google-github-actions/run-gemini-cli@v0
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        with:
          prompt: |
            Respond to this user request in the context of the repository:
            
            Comment: ${{ github.event.comment.body }}
            
            Provide helpful, actionable advice based on the repository content.